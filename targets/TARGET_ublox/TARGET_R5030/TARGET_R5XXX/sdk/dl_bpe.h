#ifndef INCLUDED_DL_BPE
#define INCLUDED_DL_BPE
/*
 * Copyright (C) u-blox 
 * All rights reserved. 
 * This source file is the sole property of u-blox. Reproduction or utilization 
 * of this source in whole or part is forbidden without the written consent of 
 * u-blox.
 *
 */

#include <stdint.h>

#define DL_BPE_PERIPHERALID4 0x07
#define DL_BPE_PERIPHERALID5 0x00
#define DL_BPE_PERIPHERALID6 0x00
#define DL_BPE_PERIPHERALID7 0x00
#define DL_BPE_PERIPHERALID0 0x63
#define DL_BPE_PERIPHERALID1 0xDA
#define DL_BPE_PERIPHERALID2 0x08
#define DL_BPE_PERIPHERALID3 0x00
#define DL_BPE_COMPONENTID0 0x0D
#define DL_BPE_COMPONENTID1 0xF0
#define DL_BPE_COMPONENTID2 0x05
#define DL_BPE_COMPONENTID3 0xB1

/** Pointer to result structure
*/
struct dl_bpe_result_addr_s {
   /** CRC Error. Half iterations done and Bit error rate at address offset 0x000, read-write */
   uint32_t result0;
   /** Dynamic Range Detection at address offset 0x004, read-write */
   uint32_t result1;
};

/** bit field defines for dl_bpe_result_addr_s#result0 */
#define DL_BPE_RESULT_ADDR_RESULT0_CRC_ERROR_OFFSET 0
#define DL_BPE_RESULT_ADDR_RESULT0_CRC_ERROR_SIZE 1
#define DL_BPE_RESULT_ADDR_RESULT0_HALFIT_DONE_OFFSET 8
#define DL_BPE_RESULT_ADDR_RESULT0_HALFIT_DONE_SIZE 6
#define DL_BPE_RESULT_ADDR_RESULT0_BER_OFFSET 16
#define DL_BPE_RESULT_ADDR_RESULT0_BER_SIZE 13
#define DL_BPE_RESULT_ADDR_RESULT0_DECODER_STATUS_OFFSET 31
#define DL_BPE_RESULT_ADDR_RESULT0_DECODER_STATUS_SIZE 1

/** bit field defines for dl_bpe_result_addr_s#result1 */
#define DL_BPE_RESULT_ADDR_RESULT1_HC_DYN_OFFSET 0
#define DL_BPE_RESULT_ADDR_RESULT1_HC_DYN_SIZE 5
#define DL_BPE_RESULT_ADDR_RESULT1_MEAN_DYN_OFFSET 8
#define DL_BPE_RESULT_ADDR_RESULT1_MEAN_DYN_SIZE 6
#define DL_BPE_RESULT_ADDR_RESULT1_MAX_DYN_OFFSET 16
#define DL_BPE_RESULT_ADDR_RESULT1_MAX_DYN_SIZE 6

/** programming descriptor format
*/
struct dl_bpe_pending_api_s {
   /** Address of LLR data at address offset 0x000, read-write */
   uint32_t laddr;
   /** Address of HARQ combining process data at address offset 0x004, read-write */
   uint32_t hc_addr;
   /** Destination address of output bits at address offset 0x008, read-write */
   uint32_t daddr;
   /** Result register at address offset 0x00C, read-write */
   uint32_t res_addr;
   /** Parameter set 0 at address offset 0x010, read-write */
   uint32_t parset0;
   /** Parameter set 0 at address offset 0x014, read-write */
   uint32_t parset1;
   /** Parameter set 0 at address offset 0x018, read-write */
   uint32_t parset2;
   /** HARQ combining parameters at address offset 0x01C, read-write */
   uint32_t hc_context;
};

/** bit field defines for dl_bpe_pending_api_s#laddr */
#define DL_BPE_PENDING_API_LADDR_LADDR_OFFSET 0
#define DL_BPE_PENDING_API_LADDR_LADDR_SIZE 32

/** bit field defines for dl_bpe_pending_api_s#hc_addr */
#define DL_BPE_PENDING_API_HC_ADDR_HC_ADDR_OFFSET 0
#define DL_BPE_PENDING_API_HC_ADDR_HC_ADDR_SIZE 32

/** bit field defines for dl_bpe_pending_api_s#daddr */
#define DL_BPE_PENDING_API_DADDR_DADDR_OFFSET 0
#define DL_BPE_PENDING_API_DADDR_DADDR_SIZE 32

/** bit field defines for dl_bpe_pending_api_s#res_addr */
#define DL_BPE_PENDING_API_RES_ADDR_RES_ADDR_OFFSET 0
#define DL_BPE_PENDING_API_RES_ADDR_RES_ADDR_SIZE 32

/** bit field defines for dl_bpe_pending_api_s#parset0 */
#define DL_BPE_PENDING_API_PARSET0_RX_E_OFFSET 0
#define DL_BPE_PENDING_API_PARSET0_RX_E_SIZE 24
#define DL_BPE_PENDING_API_PARSET0_RX_K0_DIV_R_OFFSET 24
#define DL_BPE_PENDING_API_PARSET0_RX_K0_DIV_R_SIZE 7

/** bit field defines for dl_bpe_pending_api_s#parset1 */
#define DL_BPE_PENDING_API_PARSET1_K_OFFSET 0
#define DL_BPE_PENDING_API_PARSET1_K_SIZE 13
#define DL_BPE_PENDING_API_PARSET1_DYN_STOP_OFFSET 25
#define DL_BPE_PENDING_API_PARSET1_DYN_STOP_SIZE 1
#define DL_BPE_PENDING_API_PARSET1_HALFIT_OFFSET 26
#define DL_BPE_PENDING_API_PARSET1_HALFIT_SIZE 6

/** bit field defines for dl_bpe_pending_api_s#parset2 */
#define DL_BPE_PENDING_API_PARSET2_BYPASS_DECODER_OFFSET 0
#define DL_BPE_PENDING_API_PARSET2_BYPASS_DECODER_SIZE 1
#define DL_BPE_PENDING_API_PARSET2_COMPRESS_HARQ_OFFSET 1
#define DL_BPE_PENDING_API_PARSET2_COMPRESS_HARQ_SIZE 1
#define DL_BPE_PENDING_API_PARSET2_DISABLE_HARQ_OFFSET 2
#define DL_BPE_PENDING_API_PARSET2_DISABLE_HARQ_SIZE 1
#define DL_BPE_PENDING_API_PARSET2_FORCE_HARQ_STORE_OFFSET 3
#define DL_BPE_PENDING_API_PARSET2_FORCE_HARQ_STORE_SIZE 1
#define DL_BPE_PENDING_API_PARSET2_FORCE_DATA_STORE_OFFSET 4
#define DL_BPE_PENDING_API_PARSET2_FORCE_DATA_STORE_SIZE 1
#define DL_BPE_PENDING_API_PARSET2_SEV_ENABLE_OFFSET 5
#define DL_BPE_PENDING_API_PARSET2_SEV_ENABLE_SIZE 1
#define DL_BPE_PENDING_API_PARSET2_BIT_REVERSE_OFFSET 7
#define DL_BPE_PENDING_API_PARSET2_BIT_REVERSE_SIZE 1
#define DL_BPE_PENDING_API_PARSET2_BYPASS_HC_COMP_OFFSET 8
#define DL_BPE_PENDING_API_PARSET2_BYPASS_HC_COMP_SIZE 1
#define DL_BPE_PENDING_API_PARSET2_CRC_DISABLE_OFFSET 9
#define DL_BPE_PENDING_API_PARSET2_CRC_DISABLE_SIZE 1
#define DL_BPE_PENDING_API_PARSET2_STORE_CRC_OFFSET 11
#define DL_BPE_PENDING_API_PARSET2_STORE_CRC_SIZE 1
#define DL_BPE_PENDING_API_PARSET2_DEC_CONV_LLR_OFFSET 21
#define DL_BPE_PENDING_API_PARSET2_DEC_CONV_LLR_SIZE 5
#define DL_BPE_PENDING_API_PARSET2_DEC_CONV_LLR_MODE_OFFSET 26
#define DL_BPE_PENDING_API_PARSET2_DEC_CONV_LLR_MODE_SIZE 2
#define DL_BPE_PENDING_API_PARSET2_LLR_PRESCALE_OFFSET 28
#define DL_BPE_PENDING_API_PARSET2_LLR_PRESCALE_SIZE 4

/** bit field defines for dl_bpe_pending_api_s#hc_context */
#define DL_BPE_PENDING_API_HC_CONTEXT_HCIN_E_OFFSET 0
#define DL_BPE_PENDING_API_HC_CONTEXT_HCIN_E_SIZE 15
#define DL_BPE_PENDING_API_HC_CONTEXT_HC_K0_DIV_R_OFFSET 16
#define DL_BPE_PENDING_API_HC_CONTEXT_HC_K0_DIV_R_SIZE 7
#define DL_BPE_PENDING_API_HC_CONTEXT_HC_VALID_OFFSET 31
#define DL_BPE_PENDING_API_HC_CONTEXT_HC_VALID_SIZE 1

/** Downlink bit processing engine control registers.
*/
struct dl_bpe_s {
   /** Pending descriptor address at address offset 0x000, read-write */
   uint32_t pending_descriptor_address;
   /** Reserved space */
   uint8_t fill0[252];
   /** Running descriptor address at address offset 0x100, read-only */
   uint32_t running_descriptor_address;
   /** Reserved space */
   uint8_t fill1[252];
   /** Command at address offset 0x200, write-only */
   uint32_t cmd;
   /** Status at address offset 0x204, read-only */
   uint32_t stat;
   /** Reserved space */
   uint8_t fill2[248];
   /** Clear fault at address offset 0x300, write-only */
   uint32_t fltclear;
   /** Fault status at address offset 0x304, read-only */
   uint32_t fltstatus;
   /** Raw fault status at address offset 0x308, read-only */
   uint32_t fltrawstatus;
   /** Fault mask clear at address offset 0x30C, write-only */
   uint32_t fltmaskclr;
   /** Fault mask set at address offset 0x310, write-only */
   uint32_t fltmaskset;
   /** Fault mask status at address offset 0x314, read-only */
   uint32_t fltmaskstatus;
   /** Reserved space */
   uint8_t fill3[3256];
   /** Peripheral ID4 Register at address offset 0xFD0, read-only constant 0x00000007 */
   uint32_t peripheralid4;
   /** Peripheral ID5 Register at address offset 0xFD4, read-only constant 0x00000000 */
   uint32_t peripheralid5;
   /** Peripheral ID6 Register at address offset 0xFD8, read-only constant 0x00000000 */
   uint32_t peripheralid6;
   /** Peripheral ID7 Register at address offset 0xFDC, read-only constant 0x00000000 */
   uint32_t peripheralid7;
   /** Peripheral ID0 Register at address offset 0xFE0, read-only constant 0x00000063 */
   uint32_t peripheralid0;
   /** Peripheral ID1 Register at address offset 0xFE4, read-only constant 0x000000DA */
   uint32_t peripheralid1;
   /** Peripheral ID2 Register at address offset 0xFE8, read-only constant 0x00000008 */
   uint32_t peripheralid2;
   /** Peripheral ID3 Register at address offset 0xFEC, read-only constant 0x00000000 */
   uint32_t peripheralid3;
   /** Primecell ID register 0 at address offset 0xFF0, read-only constant 0x0000000D */
   uint32_t componentid0;
   /** Primecell ID register 1 at address offset 0xFF4, read-only constant 0x000000F0 */
   uint32_t componentid1;
   /** Primecell ID register 2 at address offset 0xFF8, read-only constant 0x00000005 */
   uint32_t componentid2;
   /** Primecell ID register 3 at address offset 0xFFC, read-only constant 0x000000B1 */
   uint32_t componentid3;
};

/** bit field defines for dl_bpe_s#pending_descriptor_address */
#define DL_BPE_PENDING_DESCRIPTOR_ADDRESS_PENDING_DESCRIPTOR_ADDRESS_OFFSET 0
#define DL_BPE_PENDING_DESCRIPTOR_ADDRESS_PENDING_DESCRIPTOR_ADDRESS_SIZE 32

/** bit field defines for dl_bpe_s#running_descriptor_address */
#define DL_BPE_RUNNING_DESCRIPTOR_ADDRESS_RUNNING_DESCRIPTOR_ADDRESS_OFFSET 0
#define DL_BPE_RUNNING_DESCRIPTOR_ADDRESS_RUNNING_DESCRIPTOR_ADDRESS_SIZE 32

/** bit field defines for dl_bpe_s#cmd */
#define DL_BPE_CMD_PENDING_SUSPEND_OFFSET 0
#define DL_BPE_CMD_PENDING_SUSPEND_SIZE 1
#define DL_BPE_CMD_PENDING_ABORT_OFFSET 1
#define DL_BPE_CMD_PENDING_ABORT_SIZE 1
#define DL_BPE_CMD_RUNNING_SUSPEND_OFFSET 2
#define DL_BPE_CMD_RUNNING_SUSPEND_SIZE 1
#define DL_BPE_CMD_RUNNING_ABORT_OFFSET 3
#define DL_BPE_CMD_RUNNING_ABORT_SIZE 1

/** bit field defines for dl_bpe_s#stat */
#define DL_BPE_STAT_PENDING_SUSPENDED_OFFSET 0
#define DL_BPE_STAT_PENDING_SUSPENDED_SIZE 1
#define DL_BPE_STAT_PENDING_VALID_OFFSET 1
#define DL_BPE_STAT_PENDING_VALID_SIZE 1
#define DL_BPE_STAT_RUNNING_SUSPENDED_OFFSET 2
#define DL_BPE_STAT_RUNNING_SUSPENDED_SIZE 1
#define DL_BPE_STAT_RUNNING_BUSY_OFFSET 3
#define DL_BPE_STAT_RUNNING_BUSY_SIZE 1
#define DL_BPE_STAT_RUNNING_ABORT_BUSY_OFFSET 4
#define DL_BPE_STAT_RUNNING_ABORT_BUSY_SIZE 1

/** bit field defines for dl_bpe_s#fltclear */
#define DL_BPE_FLTCLEAR_INVALID_BYPASS_DECODER_AND_HARQ_EN_OFFSET 0
#define DL_BPE_FLTCLEAR_INVALID_BYPASS_DECODER_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_REQ_HCOUT_AND_HARQ_EN_OFFSET 1
#define DL_BPE_FLTCLEAR_INVALID_REQ_HCOUT_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_HCIN_AND_HARQ_EN_OFFSET 2
#define DL_BPE_FLTCLEAR_INVALID_HCIN_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_OFFSET 3
#define DL_BPE_FLTCLEAR_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_DEC_CONV_MODE_OFFSET 4
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_DEC_CONV_MODE_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_DEC_CONV_LLR_OFFSET 5
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_DEC_CONV_LLR_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_CRC_SELECT_OFFSET 6
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_CRC_SELECT_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_DYN_STOP_OFFSET 7
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_DYN_STOP_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_HALFIT_OFFSET 8
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_HALFIT_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_HCIN_E_OFFSET 9
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_HCIN_E_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_HCIN_K0_DIV_R_OFFSET 10
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_HCIN_K0_DIV_R_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_RX_E_OFFSET 11
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_RX_E_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_RX_K0_DIV_R_OFFSET 12
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_RX_K0_DIV_R_SIZE 1
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_K_OFFSET 13
#define DL_BPE_FLTCLEAR_INVALID_RANGE_FOR_K_SIZE 1
#define DL_BPE_FLTCLEAR_LLR_READ_OFFSET 14
#define DL_BPE_FLTCLEAR_LLR_READ_SIZE 1
#define DL_BPE_FLTCLEAR_HARQ_READ_OFFSET 15
#define DL_BPE_FLTCLEAR_HARQ_READ_SIZE 1
#define DL_BPE_FLTCLEAR_DESCRIPTOR_READ_OFFSET 16
#define DL_BPE_FLTCLEAR_DESCRIPTOR_READ_SIZE 1
#define DL_BPE_FLTCLEAR_DECOUT_WRITE_OFFSET 17
#define DL_BPE_FLTCLEAR_DECOUT_WRITE_SIZE 1
#define DL_BPE_FLTCLEAR_HCOUT_WRITE_OFFSET 18
#define DL_BPE_FLTCLEAR_HCOUT_WRITE_SIZE 1
#define DL_BPE_FLTCLEAR_RESULT_WRITE_OFFSET 19
#define DL_BPE_FLTCLEAR_RESULT_WRITE_SIZE 1
#define DL_BPE_FLTCLEAR_DESCRIPTOR_WRITE_OFFSET 20
#define DL_BPE_FLTCLEAR_DESCRIPTOR_WRITE_SIZE 1

/** bit field defines for dl_bpe_s#fltstatus */
#define DL_BPE_FLTSTATUS_INVALID_BYPASS_DECODER_AND_HARQ_EN_OFFSET 0
#define DL_BPE_FLTSTATUS_INVALID_BYPASS_DECODER_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_REQ_HCOUT_AND_HARQ_EN_OFFSET 1
#define DL_BPE_FLTSTATUS_INVALID_REQ_HCOUT_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_HCIN_AND_HARQ_EN_OFFSET 2
#define DL_BPE_FLTSTATUS_INVALID_HCIN_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_OFFSET 3
#define DL_BPE_FLTSTATUS_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_DEC_CONV_MODE_OFFSET 4
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_DEC_CONV_MODE_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_DEC_CONV_LLR_OFFSET 5
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_DEC_CONV_LLR_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_CRC_SELECT_OFFSET 6
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_CRC_SELECT_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_DYN_STOP_OFFSET 7
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_DYN_STOP_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_HALFIT_OFFSET 8
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_HALFIT_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_HCIN_E_OFFSET 9
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_HCIN_E_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_HCIN_K0_DIV_R_OFFSET 10
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_HCIN_K0_DIV_R_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_RX_E_OFFSET 11
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_RX_E_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_RX_K0_DIV_R_OFFSET 12
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_RX_K0_DIV_R_SIZE 1
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_K_OFFSET 13
#define DL_BPE_FLTSTATUS_INVALID_RANGE_FOR_K_SIZE 1
#define DL_BPE_FLTSTATUS_LLR_READ_OFFSET 14
#define DL_BPE_FLTSTATUS_LLR_READ_SIZE 1
#define DL_BPE_FLTSTATUS_HARQ_READ_OFFSET 15
#define DL_BPE_FLTSTATUS_HARQ_READ_SIZE 1
#define DL_BPE_FLTSTATUS_DESCRIPTOR_READ_OFFSET 16
#define DL_BPE_FLTSTATUS_DESCRIPTOR_READ_SIZE 1
#define DL_BPE_FLTSTATUS_DECOUT_WRITE_OFFSET 17
#define DL_BPE_FLTSTATUS_DECOUT_WRITE_SIZE 1
#define DL_BPE_FLTSTATUS_HCOUT_WRITE_OFFSET 18
#define DL_BPE_FLTSTATUS_HCOUT_WRITE_SIZE 1
#define DL_BPE_FLTSTATUS_RESULT_WRITE_OFFSET 19
#define DL_BPE_FLTSTATUS_RESULT_WRITE_SIZE 1
#define DL_BPE_FLTSTATUS_DESCRIPTOR_WRITE_OFFSET 20
#define DL_BPE_FLTSTATUS_DESCRIPTOR_WRITE_SIZE 1

/** bit field defines for dl_bpe_s#fltrawstatus */
#define DL_BPE_FLTRAWSTATUS_INVALID_BYPASS_DECODER_AND_HARQ_EN_OFFSET 0
#define DL_BPE_FLTRAWSTATUS_INVALID_BYPASS_DECODER_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_REQ_HCOUT_AND_HARQ_EN_OFFSET 1
#define DL_BPE_FLTRAWSTATUS_INVALID_REQ_HCOUT_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_HCIN_AND_HARQ_EN_OFFSET 2
#define DL_BPE_FLTRAWSTATUS_INVALID_HCIN_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_OFFSET 3
#define DL_BPE_FLTRAWSTATUS_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_DEC_CONV_MODE_OFFSET 4
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_DEC_CONV_MODE_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_DEC_CONV_LLR_OFFSET 5
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_DEC_CONV_LLR_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_CRC_SELECT_OFFSET 6
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_CRC_SELECT_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_DYN_STOP_OFFSET 7
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_DYN_STOP_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_HALFIT_OFFSET 8
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_HALFIT_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_HCIN_E_OFFSET 9
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_HCIN_E_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_HCIN_K0_DIV_R_OFFSET 10
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_HCIN_K0_DIV_R_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_RX_E_OFFSET 11
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_RX_E_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_RX_K0_DIV_R_OFFSET 12
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_RX_K0_DIV_R_SIZE 1
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_K_OFFSET 13
#define DL_BPE_FLTRAWSTATUS_INVALID_RANGE_FOR_K_SIZE 1
#define DL_BPE_FLTRAWSTATUS_LLR_READ_OFFSET 14
#define DL_BPE_FLTRAWSTATUS_LLR_READ_SIZE 1
#define DL_BPE_FLTRAWSTATUS_HARQ_READ_OFFSET 15
#define DL_BPE_FLTRAWSTATUS_HARQ_READ_SIZE 1
#define DL_BPE_FLTRAWSTATUS_DESCRIPTOR_READ_OFFSET 16
#define DL_BPE_FLTRAWSTATUS_DESCRIPTOR_READ_SIZE 1
#define DL_BPE_FLTRAWSTATUS_DECOUT_WRITE_OFFSET 17
#define DL_BPE_FLTRAWSTATUS_DECOUT_WRITE_SIZE 1
#define DL_BPE_FLTRAWSTATUS_HCOUT_WRITE_OFFSET 18
#define DL_BPE_FLTRAWSTATUS_HCOUT_WRITE_SIZE 1
#define DL_BPE_FLTRAWSTATUS_RESULT_WRITE_OFFSET 19
#define DL_BPE_FLTRAWSTATUS_RESULT_WRITE_SIZE 1
#define DL_BPE_FLTRAWSTATUS_DESCRIPTOR_WRITE_OFFSET 20
#define DL_BPE_FLTRAWSTATUS_DESCRIPTOR_WRITE_SIZE 1

/** bit field defines for dl_bpe_s#fltmaskclr */
#define DL_BPE_FLTMASKCLR_INVALID_BYPASS_DECODER_AND_HARQ_EN_OFFSET 0
#define DL_BPE_FLTMASKCLR_INVALID_BYPASS_DECODER_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_REQ_HCOUT_AND_HARQ_EN_OFFSET 1
#define DL_BPE_FLTMASKCLR_INVALID_REQ_HCOUT_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_HCIN_AND_HARQ_EN_OFFSET 2
#define DL_BPE_FLTMASKCLR_INVALID_HCIN_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_OFFSET 3
#define DL_BPE_FLTMASKCLR_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_DEC_CONV_MODE_OFFSET 4
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_DEC_CONV_MODE_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_DEC_CONV_LLR_OFFSET 5
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_DEC_CONV_LLR_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_CRC_SELECT_OFFSET 6
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_CRC_SELECT_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_DYN_STOP_OFFSET 7
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_DYN_STOP_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_HALFIT_OFFSET 8
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_HALFIT_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_HCIN_E_OFFSET 9
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_HCIN_E_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_HCIN_K0_DIV_R_OFFSET 10
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_HCIN_K0_DIV_R_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_RX_E_OFFSET 11
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_RX_E_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_RX_K0_DIV_R_OFFSET 12
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_RX_K0_DIV_R_SIZE 1
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_K_OFFSET 13
#define DL_BPE_FLTMASKCLR_INVALID_RANGE_FOR_K_SIZE 1
#define DL_BPE_FLTMASKCLR_LLR_READ_OFFSET 14
#define DL_BPE_FLTMASKCLR_LLR_READ_SIZE 1
#define DL_BPE_FLTMASKCLR_HARQ_READ_OFFSET 15
#define DL_BPE_FLTMASKCLR_HARQ_READ_SIZE 1
#define DL_BPE_FLTMASKCLR_DESCRIPTOR_READ_OFFSET 16
#define DL_BPE_FLTMASKCLR_DESCRIPTOR_READ_SIZE 1
#define DL_BPE_FLTMASKCLR_DECOUT_WRITE_OFFSET 17
#define DL_BPE_FLTMASKCLR_DECOUT_WRITE_SIZE 1
#define DL_BPE_FLTMASKCLR_HCOUT_WRITE_OFFSET 18
#define DL_BPE_FLTMASKCLR_HCOUT_WRITE_SIZE 1
#define DL_BPE_FLTMASKCLR_RESULT_WRITE_OFFSET 19
#define DL_BPE_FLTMASKCLR_RESULT_WRITE_SIZE 1
#define DL_BPE_FLTMASKCLR_DESCRIPTOR_WRITE_OFFSET 20
#define DL_BPE_FLTMASKCLR_DESCRIPTOR_WRITE_SIZE 1

/** bit field defines for dl_bpe_s#fltmaskset */
#define DL_BPE_FLTMASKSET_INVALID_BYPASS_DECODER_AND_HARQ_EN_OFFSET 0
#define DL_BPE_FLTMASKSET_INVALID_BYPASS_DECODER_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_REQ_HCOUT_AND_HARQ_EN_OFFSET 1
#define DL_BPE_FLTMASKSET_INVALID_REQ_HCOUT_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_HCIN_AND_HARQ_EN_OFFSET 2
#define DL_BPE_FLTMASKSET_INVALID_HCIN_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_OFFSET 3
#define DL_BPE_FLTMASKSET_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_DEC_CONV_MODE_OFFSET 4
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_DEC_CONV_MODE_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_DEC_CONV_LLR_OFFSET 5
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_DEC_CONV_LLR_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_CRC_SELECT_OFFSET 6
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_CRC_SELECT_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_DYN_STOP_OFFSET 7
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_DYN_STOP_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_HALFIT_OFFSET 8
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_HALFIT_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_HCIN_E_OFFSET 9
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_HCIN_E_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_HCIN_K0_DIV_R_OFFSET 10
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_HCIN_K0_DIV_R_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_RX_E_OFFSET 11
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_RX_E_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_RX_K0_DIV_R_OFFSET 12
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_RX_K0_DIV_R_SIZE 1
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_K_OFFSET 13
#define DL_BPE_FLTMASKSET_INVALID_RANGE_FOR_K_SIZE 1
#define DL_BPE_FLTMASKSET_LLR_READ_OFFSET 14
#define DL_BPE_FLTMASKSET_LLR_READ_SIZE 1
#define DL_BPE_FLTMASKSET_HARQ_READ_OFFSET 15
#define DL_BPE_FLTMASKSET_HARQ_READ_SIZE 1
#define DL_BPE_FLTMASKSET_DESCRIPTOR_READ_OFFSET 16
#define DL_BPE_FLTMASKSET_DESCRIPTOR_READ_SIZE 1
#define DL_BPE_FLTMASKSET_DECOUT_WRITE_OFFSET 17
#define DL_BPE_FLTMASKSET_DECOUT_WRITE_SIZE 1
#define DL_BPE_FLTMASKSET_HCOUT_WRITE_OFFSET 18
#define DL_BPE_FLTMASKSET_HCOUT_WRITE_SIZE 1
#define DL_BPE_FLTMASKSET_RESULT_WRITE_OFFSET 19
#define DL_BPE_FLTMASKSET_RESULT_WRITE_SIZE 1
#define DL_BPE_FLTMASKSET_DESCRIPTOR_WRITE_OFFSET 20
#define DL_BPE_FLTMASKSET_DESCRIPTOR_WRITE_SIZE 1

/** bit field defines for dl_bpe_s#fltmaskstatus */
#define DL_BPE_FLTMASKSTATUS_INVALID_BYPASS_DECODER_AND_HARQ_EN_OFFSET 0
#define DL_BPE_FLTMASKSTATUS_INVALID_BYPASS_DECODER_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_REQ_HCOUT_AND_HARQ_EN_OFFSET 1
#define DL_BPE_FLTMASKSTATUS_INVALID_REQ_HCOUT_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_HCIN_AND_HARQ_EN_OFFSET 2
#define DL_BPE_FLTMASKSTATUS_INVALID_HCIN_AND_HARQ_EN_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_OFFSET 3
#define DL_BPE_FLTMASKSTATUS_INVALID_BYPASS_DECODER_AND_REQ_HCOUT_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_DEC_CONV_MODE_OFFSET 4
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_DEC_CONV_MODE_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_DEC_CONV_LLR_OFFSET 5
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_DEC_CONV_LLR_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_CRC_SELECT_OFFSET 6
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_CRC_SELECT_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_DYN_STOP_OFFSET 7
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_DYN_STOP_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_HALFIT_OFFSET 8
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_HALFIT_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_HCIN_E_OFFSET 9
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_HCIN_E_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_HCIN_K0_DIV_R_OFFSET 10
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_HCIN_K0_DIV_R_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_RX_E_OFFSET 11
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_RX_E_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_RX_K0_DIV_R_OFFSET 12
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_RX_K0_DIV_R_SIZE 1
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_K_OFFSET 13
#define DL_BPE_FLTMASKSTATUS_INVALID_RANGE_FOR_K_SIZE 1
#define DL_BPE_FLTMASKSTATUS_LLR_READ_OFFSET 14
#define DL_BPE_FLTMASKSTATUS_LLR_READ_SIZE 1
#define DL_BPE_FLTMASKSTATUS_HARQ_READ_OFFSET 15
#define DL_BPE_FLTMASKSTATUS_HARQ_READ_SIZE 1
#define DL_BPE_FLTMASKSTATUS_DESCRIPTOR_READ_OFFSET 16
#define DL_BPE_FLTMASKSTATUS_DESCRIPTOR_READ_SIZE 1
#define DL_BPE_FLTMASKSTATUS_DECOUT_WRITE_OFFSET 17
#define DL_BPE_FLTMASKSTATUS_DECOUT_WRITE_SIZE 1
#define DL_BPE_FLTMASKSTATUS_HCOUT_WRITE_OFFSET 18
#define DL_BPE_FLTMASKSTATUS_HCOUT_WRITE_SIZE 1
#define DL_BPE_FLTMASKSTATUS_RESULT_WRITE_OFFSET 19
#define DL_BPE_FLTMASKSTATUS_RESULT_WRITE_SIZE 1
#define DL_BPE_FLTMASKSTATUS_DESCRIPTOR_WRITE_OFFSET 20
#define DL_BPE_FLTMASKSTATUS_DESCRIPTOR_WRITE_SIZE 1

/** bit field defines for dl_bpe_s#peripheralid4 */
#define DL_BPE_PERIPHERALID4_PERIPHERALID4_OFFSET 0
#define DL_BPE_PERIPHERALID4_PERIPHERALID4_SIZE 8

/** bit field defines for dl_bpe_s#peripheralid5 */
#define DL_BPE_PERIPHERALID5_PERIPHERALID5_OFFSET 0
#define DL_BPE_PERIPHERALID5_PERIPHERALID5_SIZE 8

/** bit field defines for dl_bpe_s#peripheralid6 */
#define DL_BPE_PERIPHERALID6_PERIPHERALID6_OFFSET 0
#define DL_BPE_PERIPHERALID6_PERIPHERALID6_SIZE 8

/** bit field defines for dl_bpe_s#peripheralid7 */
#define DL_BPE_PERIPHERALID7_PERIPHERALID7_OFFSET 0
#define DL_BPE_PERIPHERALID7_PERIPHERALID7_SIZE 8

/** bit field defines for dl_bpe_s#peripheralid0 */
#define DL_BPE_PERIPHERALID0_PERIPHERALID0_OFFSET 0
#define DL_BPE_PERIPHERALID0_PERIPHERALID0_SIZE 8

/** bit field defines for dl_bpe_s#peripheralid1 */
#define DL_BPE_PERIPHERALID1_PERIPHERALID1_OFFSET 0
#define DL_BPE_PERIPHERALID1_PERIPHERALID1_SIZE 8

/** bit field defines for dl_bpe_s#peripheralid2 */
#define DL_BPE_PERIPHERALID2_PERIPHERALID2_OFFSET 0
#define DL_BPE_PERIPHERALID2_PERIPHERALID2_SIZE 8

/** bit field defines for dl_bpe_s#peripheralid3 */
#define DL_BPE_PERIPHERALID3_PERIPHERALID3_OFFSET 0
#define DL_BPE_PERIPHERALID3_PERIPHERALID3_SIZE 8

/** bit field defines for dl_bpe_s#componentid0 */
#define DL_BPE_COMPONENTID0_COMPONENTID0_OFFSET 0
#define DL_BPE_COMPONENTID0_COMPONENTID0_SIZE 8

/** bit field defines for dl_bpe_s#componentid1 */
#define DL_BPE_COMPONENTID1_COMPONENTID1_OFFSET 0
#define DL_BPE_COMPONENTID1_COMPONENTID1_SIZE 8

/** bit field defines for dl_bpe_s#componentid2 */
#define DL_BPE_COMPONENTID2_COMPONENTID2_OFFSET 0
#define DL_BPE_COMPONENTID2_COMPONENTID2_SIZE 8

/** bit field defines for dl_bpe_s#componentid3 */
#define DL_BPE_COMPONENTID3_COMPONENTID3_OFFSET 0
#define DL_BPE_COMPONENTID3_COMPONENTID3_SIZE 8

/* EOF dl_bpe.h */
#endif
